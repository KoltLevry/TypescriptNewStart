import { useRef, useState } from "react";

const Task = () => {
    // react –Ω–µ —Å–ª—ñ–¥–∫—É—î –∑–∞ –∑–º—ñ–Ω–Ω–æ—é –Ω–∏—â–µ —ñ –Ω–µ –º–æ–∂–µ —ó—ó –∑–º—ñ–Ω–∏—Ç–∏ -> —Ç—Ä–µ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ö—É–∫ useState
    // const isEdit = false;
    // const isEdit = true;

    // useState - –º–µ—Ç–æ–¥ —è–∫–∏–π –≤ —è–∫–æ—Å—Ç—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –±–∞–∂–∞—î –∑–Ω–∞—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó –∑–∞ —è–∫–æ—é –±—É–¥–µ —Å–ª—ñ–¥–∫—É–≤–∞—Ç–∏ —Ä–µ–∞–∫—Ç —ñ –∑–∞ —è–∫–æ—é –±—É–¥–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ,
    // –≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –∑ 2 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    // –ö–æ—Ä—Ç–µ–∂ - Tuple (—á–∞—Å–Ω–∏–π –≤–∏–ø–∞–¥–æ–∫ –º–∞—Å–∏–≤—É - –º–∞—Å–∏–≤ –∑ –Ω–∞–ø–µ—Ä–µ–¥ –≤—ñ–¥–æ–º–æ—é –∫-—Ç—é –µ–ª–µ–º–µ–Ω—Ç—ñ–≤)
    const [isEdit, setIsEdit] = useState(true);
    // –ø–æ –¥–µ—Ñ–æ–ª—Ç—É –≤ —Å–∫–æ–±–∫–∞—Ö –≤ useState(); –≤–∂–µ —Å—Ç–æ—ó—Ç—å false
    // isEdit - –∑–º—ñ–Ω–Ω–∞, setIsEdit - —Ñ—É–Ω–∫—Ü—ñ—è —è–∫–∞ –Ω–∞–∑–Ω–∞—á–∞—î –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∑–º—ñ–Ω–Ω–æ—ó

    const [updatedTask, setUpdatedTask] = useState("");

    // handle = —á–∞—Å—Ç–æ –≤—Ä—É—á–Ω—É –ø—Ä–æ–ø–∏—Å–∞–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞–∫ –ø–æ–∑–Ω–∞—á–∞—é—Ç—å—Å—è
    const handleClickSave = () => {
        if(textRef.current) { // üëà –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ current –Ω–µ null
            setUpdatedTask(textRef.current.value);
        //  textRef.current.value ‚Äî —Ü–µ —Ñ–∞–∫—Ç–∏—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è, –≤–≤–µ–¥–µ–Ω–µ –≤ <textarea>.
        setIsEdit(false);}

        // useRef<HTMLTextAreaElement | null>(null) –æ–∑–Ω–∞—á–∞—î:
        // –°–ø–æ—á–∞—Ç–∫—É textRef.current === null (–±–æ —â–µ –Ω–µ–º–∞—î <textarea> —É DOM).
        // –ü—ñ—Å–ª—è —Ä–µ–Ω–¥–µ—Ä—É React –ø—Ä–∏–∑–Ω–∞—á–∞—î textRef.current –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ <textarea>.
    }

    // React.useRef() - —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —â–æ –¥–æ–ø–æ–º–∞–≥–∞—î –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–∏–ª–∫—É –±–µ–∑ –Ω–∞–∑–≤–∏ –Ω–∞ –±-—è –µ–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
    // –∞–Ω–∞–ª–æ–≥ –¥–æ document.getElementById()
    // –¥–æ–ø–æ–º–∞–≥–∞—î –æ—Ç—Ä —Å–∏–ª–∫—É –Ω–∞ —Ç–æ–π –µ–ª–µ–º–µ–Ω—Ç –≤ —á–∞—Å—Ç–∏–Ω—ñ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å –≤—ñ–¥–±—É–≤–∞—Ç–∏—Å—è –∑–º—ñ–Ω–∏
    // –∑–Ω–æ–≤—É –æ–±—Ö–æ–¥–∏–º–æ —Ä–æ–±–æ—Ç—É –∑ –î–æ–º —ñ –µ–∫–æ–Ω–æ–º–∏–º–æ —Ä–µ—Å—É—Ä—Å–∏ –ø—Ä–æ–≥—Ä–∞–º–∏
    const textRef = useRef<HTMLTextAreaElement | null>(null);
    console.log(textRef);
    console.log(textRef.current);

    const handleClickDelete = () => {
        setUpdatedTask("");
    };

    // task focus with useRef
    const inputRef = useRef<HTMLInputElement | null>(null);
    const handleFocus = () => {
        inputRef.current?.focus(); // –§–æ–∫—É—Å—É—î–º–æ —ñ–Ω–ø—É—Ç
    }

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä—ñ–≤ (setTimeout, setInterval)
    const timeoutRef = useRef<number | null>(null);

    const startTimer = () => {
        timeoutRef.current = window.setTimeout( () => {
            alert("In 3 sec!");
        }, 3000);
        console.log("Timer - start")
    };

    const cancelTimer = () => {
        if(timeoutRef.current) {
            clearTimeout(timeoutRef.current);
        }
        console.log("Timer - default")
    }
    // –º–º–º, –∑–∞—à–∏–±—ñ—Å—å –≤–µ—Å–µ–ª–æ üëç

    // –∫–æ–ª–∏ —â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å useRef: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –∞–Ω—ñ–º–∞—Ü—ñ—è—Ö (–∑ GSAP, Framer Motion)

    return isEdit ? ( //—Ä–µ–∂–∏–º —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        <>
            <>
            <textarea placeholder="Save your task" ref={textRef} defaultValue={updatedTask}></textarea>
            {/* onClick - —Ü–µ jsx - –∫–∞–º–µ–ª–∫–µ–π—Å */}
            <button onClick={handleClickSave}>Save</button>
            </>
            <hr />
            <input ref={inputRef} type="text" />
            <button onClick={handleFocus}>Focus</button>
            <hr />
            <button onClick={startTimer}>Alert - start timer</button>
            <button onClick={cancelTimer}>Alert - cancel timer</button>
        </>
    ) : ( //—Ä–µ–∂–∏–º –ø–µ—Ä–µ–≥–ª—è–¥—É
        <>
            <>
            <p>{updatedTask}</p>
            {/* –¥–∏–≤–Ω–æ, —è–∫—â–æ –ø—Ä–æ–ø–∏—Å–∞–Ω–∞ –ª–æ–≥—ñ–∫–∞ –∫–ª—ñ–∫—É —Ç—ñ–ª—å–∫–∏ –¥–ª—è 1—ó –∫–Ω–æ–ø–∫–∏, —Ç–æ –ª–æ–≥—ñ–∫–∞ –∫–ª—ñ–∫—É –Ω—ñ –¥–ª—è –∫–æ–≥–æ –Ω–µ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è */}
            {/* result - —è –Ω–µ —Ä–æ–∑—ñ–±—Ä–∞–ª–∞—Å—è —è–∫—É –ª–æ–≥—ñ–∫—É –¥–æ —è–∫–æ—ó –∫–Ω–æ–ø–∫–∏ —è –ø—Ä–æ–ø–∏—Å–∞–ª–∞ —ñ —â–æ –Ω–∞–∂–∏–º–∞—é, —Ç–∞–∫, –≤—Å–µ –ø—Ä–∞—Ü—é—î —ñ –≤ –æ–Ω–¥–æ—Ä–∞–∑–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ*/}
            <button onClick={()=>{setIsEdit(true)}}>Edit</button>
            {/* –∑–º—ñ–Ω—é—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —Å—Ç–∞–Ω - state, a set... - –º–µ—Ç–æ–¥ —è–∫–∏–π –∑–º—ñ–Ω—é—î —Ü–µ–π —Å—Ç–∞–Ω (—Ç—ñ–ª—å–∫–∏ —Ç–∞–∫ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞–Ω - –≤ —Ä—É—á–Ω—É –∑–º—ñ–Ω–Ω—É –º–∏ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –∑–º—ñ–Ω–Ω—é—î, —Ç—ñ–ª—å–∫–∏ —Ç–∞–∫)*/}
            <button onClick={handleClickDelete}>Delete</button>
            </>            
        </>
    ) 
};

export default Task;

// –ù–∞–π–±—ñ–ª—å—à–µ useRef –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –≤:
// - –§–æ–∫—É—Å—É–≤–∞–Ω–Ω—ñ —ñ–Ω–ø—É—Ç—ñ–≤ –ø—ñ—Å–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª–∫–∏
// - –ê–Ω—ñ–º–∞—Ü—ñ—è—Ö
// - –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ setTimeout / setInterval
// - –û–±—Ä–æ–±—Ü—ñ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö DOM-–æ–ø–µ—Ä–∞—Ü—ñ–π
// –£ –≤–µ–ª–∏–∫–∏—Ö ToDo-—Å–ø–∏—Å–∫–∞—Ö –∑–∞–∑–≤–∏—á–∞–π useState –∞–±–æ useReducer, –∞ –Ω–µ useRef. 
// –Ø–∫—â–æ —Ç—Ä–µ–±–∞ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—è –≤ —ñ–Ω–ø—É—Ç ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å onChange —ñ useState.

// –©–æ –∫–æ–ª–∏ –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏
// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —ñ–Ω–ø—É—Ç—ñ–≤ (—Ç–µ–∫—Å—Ç, –ø–∞—Ä–æ–ª—å)	= useState
// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –≤–≤–µ–¥–µ–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è	= useRef
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ñ–æ–∫—É—Å –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏	= useRef
// –†–æ–±–æ—Ç–∞ –∑ —Ñ–æ—Ä–º–∞–º–∏ (Formik, React Hook Form)	= useState, useReducer
// –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–æ–ª—è / –ø–æ–ª—ñ–≤	= Yup, useState
// –û–±—Ä–æ–±–∫–∞ –∫–æ–∂–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ	= onChange + useState
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—ñ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –∫–æ–¥—É –∑ SMS (OTP)	= useRef